"use client";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { AlertCircle } from "lucide-react";
import { Manufacturer } from "@prisma/client";
import { useState, useEffect } from "react";
import Image from "next/image";
import { useToast } from "@/hooks/use-toast";
import ManufacturerEditSheet from "./manufacturer-edit-sheet";
interface DevicesResponse {
  deviceCount: number;
}

interface ItemsResponse {
  itemCount: number;
}

function getDevicesForManufacturer(manufacturerId: string): Promise<number> {
  return fetch(
    `/api/manufacturers?action=getManufacturerDevices&manufacturerId=${manufacturerId}`,
    {
      method: "GET",
    }
  )
    .then((devicesRes) => devicesRes.json())
    .then((devicesData: DevicesResponse) => {
      return devicesData.deviceCount || 0;
    })
    .catch((error) => {
      console.error("Error fetching devices:", error);
      return 0;
    });
}

function getItemsForManufacturer(manufacturerId: string): Promise<number> {
  return fetch(
    `/api/manufacturers?action=getManufacturerItems&manufacturerId=${manufacturerId}`,
    {
      method: "GET",
    }
  )
    .then((itemsRes) => itemsRes.json())
    .then((itemsData: ItemsResponse) => {
      return itemsData.itemCount || 0;
    })
    .catch((error) => {
      console.error("Error fetching items:", error);
      return 0;
    });
}

//const devices: String[] = [];
//const items: String[] = [];
export function ManufacturerListOld() {
  const [items, setItems] = useState<{ [key: string]: number }>({});
  const [devices, setDevices] = useState<{ [key: string]: number }>({});
  const [isLoading, setIsLoading] = useState(true);

  const { toast } = useToast();

  const [manufacturers, setManufacturers] = useState<Manufacturer[]>([]);
  const fetchManufacturersData = () => {
    setIsLoading(true);
    console.log("Fetching manufacturers...");
    fetch("/api/manufacturers?action=getManufacturers", {
      method: "GET",
    })
      .then((res) => res.json())
      .then((data) => {
        setManufacturers(data);

        data.forEach((manufacturer: Manufacturer) => {
          getItemsForManufacturer(manufacturer.id).then((itemsCount) => {
            setItems((prevState) => ({
              ...prevState,
              [manufacturer.id]: itemsCount,
            }));
          });

          getDevicesForManufacturer(manufacturer.id).then((devicesCount) => {
            setDevices((prevState) => ({
              ...prevState,
              [manufacturer.id]: devicesCount,
            }));
          });
        });
      })
      .catch((error) => {
        console.error("Error fetching manufacturers:", error);
        toast({
          title: "Error fetching manufacturers",
          description: "Please try again later",
          variant: "destructive",
        });
      })
      .finally(() => {
        setTimeout(() => {
          setIsLoading(false);
        }, 1000);
      });
  };

  useEffect(() => {
    fetchManufacturersData();
  }, []);

  return (
    <>
      {isLoading ? (
        <div className="text-center">Loading...</div>
      ) : (
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[100px]">Image</TableHead>
              <TableHead>Name</TableHead>
              <TableHead>Website</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Phone</TableHead>
              <TableHead>Support URL</TableHead>
              <TableHead>Devices</TableHead>
              <TableHead>Items</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {manufacturers.map((manufacturer) => (
              <TableRow key={manufacturer.id}>
                <TableCell>
                  {manufacturer.image ? (
                    <Image
                      src={manufacturer.image}
                      alt={manufacturer.name}
                      width={50}
                      height={50}
                      className="rounded-md"
                    />
                  ) : (
                    <AlertCircle className="w-10 h-10 text-gray-300" />
                  )}
                </TableCell>
                <TableCell className="font-medium">{manufacturer.name}</TableCell>
                <TableCell>
                  <p>{manufacturer.siteUrl || "N/A"}</p>
                </TableCell>
                <TableCell>
                  <p>{manufacturer.supportEmail || "N/A"}</p>
                </TableCell>
                <TableCell>
                  <p>{manufacturer.supportPhone || "N/A"}</p>
                </TableCell>
                <TableCell>
                  <p>{manufacturer.supportUrl || "N/A"}</p>
                </TableCell>

                <TableCell>
                  {<p>{devices[String(manufacturer.id)]}</p>}
                </TableCell>
                <TableCell>
                  {<p>{items[String(manufacturer.id)]}</p>}
                </TableCell>
                <TableCell>
                  <ManufacturerEditSheet manufacturer={manufacturer} callback={fetchManufacturersData}  />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}
