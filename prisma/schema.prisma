// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator drizzle {
  provider = "drizzle-prisma-generator"
  output   = "./drizzle" // Where to put generated Drizle tables
}

generator client {
  provider = "prisma-client-js"
}



// Other models remain unchanged
model Device {
  id               String       @id @default(cuid())
  name             String
  status           Status       @relation(fields: [statusId], references: [id])
  statusId         String  
  currentUserId    String?
  location         Location?    @relation(fields: [locationId], references: [id])
  locationId       String?
  purchaseCost     String?
  purchaseDate     DateTime?
  purchaseSupplier Supplier?    @relation(fields: [supplierId], references: [id])
  supplierId       String?
  purchaseOrderId  String?
  serialNumber     String?
  model            Model?       @relation(fields: [modelId], references: [id])
  modelId          String?
  image            String?
  byod             Boolean
  notes            String?
  available        Boolean
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
  manufacturerId   String
  category         Category     @relation(fields: [categoryId], references: [id])
  categoryId       String
}

model Location {
  id               String     @id @default(cuid())
  name             String
  parentLocation   Location?  @relation("ParentChild", fields: [parentLocationId], references: [id])
  parentLocationId String?
  children         Location[] @relation("ParentChild")
  devices          Device[]
  items            Item[]
}

model Item {
  id               String       @id @default(cuid())
  name             String
  status           Status       @relation(fields: [statusId], references: [id])
  statusId         String
  currentUserId    String?
  location         Location?    @relation(fields: [locationId], references: [id])
  locationId       String?
  purchaseCost     String?
  purchaseDate     DateTime?
  purchaseSupplier Supplier?    @relation(fields: [supplierId], references: [id])
  supplierId       String?
  purchaseOrderId  String?
  serialNumber     String?
  model            Model?       @relation(fields: [modelId], references: [id])
  modelId          String?
  image            String?
  byod             Boolean
  notes            String?
  available        Boolean
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
  manufacturerId   String
  category         Category     @relation(fields: [categoryId], references: [id])
  categoryId       String
  userId           String?
}

model Supplier {
  id            String   @id @default(cuid())
  website       String
  phoneNumber   String
  contactPerson String
  postAdress    String
  emailAdress   String
  devices       Device[]
  items         Item[]
}

model Manufacturer {
  id           String   @id @default(cuid())
  name         String
  image        String?
  siteUrl      String?
  supportUrl   String?
  supportPhone String?
  supportEmail String
  devices      Device[]
  items        Item[]
  models       Model[]
}

model Model {
  id             String       @id @default(cuid())
  name           String
  image          String?
  modelNumber    String?
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  manufacturerId String
  category       Category     @relation(fields: [categoryId], references: [id])
  categoryId     String
  devices        Device[]
  items          Item[]
}

model Category {
  id      String   @id @default(cuid())
  name    String
  type    String
  devices Device[]
  items   Item[]
  models  Model[]
}

model Log {
  id       String @id @default(cuid())
  userId   String
  action   String
  item     String
  itemType String // device/item
}

model Status {
  id      String   @id @default(cuid())
  name    String
  color   String
  default Boolean  @default(false)
  devices Device[]
  items   Item[]
}
